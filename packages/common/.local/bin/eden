#!/usr/bin/env bash
# eden - Central command dispatcher for Eden environment management
# Usage: eden <command> [options]

set -euo pipefail

# Determine Eden root directory
# This script lives in packages/common/.local/bin/, so go up 4 levels
# Resolve symlinks first to find the actual script location
SCRIPT_PATH="${BASH_SOURCE[0]}"
# Follow symlinks to get the real path
while [ -L "$SCRIPT_PATH" ]; do
    SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
    # If the symlink is relative, make it absolute
    [[ "$SCRIPT_PATH" != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
EDEN_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
RESET='\033[0m'

# Print colored output
print_header() {
    echo -e "${BOLD}${BLUE}$1${RESET}"
}

print_success() {
    echo -e "${GREEN}✓${RESET} $1"
}

print_error() {
    echo -e "${RED}✗${RESET} $1" >&2
}

print_info() {
    echo -e "${BLUE}→${RESET} $1"
}

# Show help
show_help() {
    print_header "Eden - Personal Environment Manager"
    echo ""
    echo -e "${BOLD}Usage:${RESET}"
    echo "  eden <command> [options]"
    echo ""
    echo -e "${BOLD}Core Commands:${RESET}"
    echo "  install [--packages]  Bootstrap Eden on a fresh system"
    echo "                        Use --packages to install packages from Brewfile/pacman.txt"
    echo "  update                Update Eden from git and re-apply symlinks"
    echo "  stow [--adopt]        Apply Eden symlinks (common + platform packages)"
    echo "                        Use --adopt to pull existing files into Eden"
    echo "  unstow                Remove Eden symlinks (same as clean)"
    echo "  graft                 Discover and integrate branch configs"
    echo "  doctor                Validate Eden installation health"
    echo "  status                Show Eden system overview and health"
    echo ""
    echo -e "${BOLD}Package Management:${RESET}"
    echo "  packages              Install packages from Brewfile (macOS) or pacman.txt (Arch)"
    echo "  list-packages         Show available packages for current platform"
    echo "  check-package <name>  Check if a package exists (official repo, AUR, or brew)"
    echo ""
    echo -e "${BOLD}Platform Commands:${RESET}"
    echo "  deploy-arch           Deploy common + arch packages only"
    echo "  deploy-mac            Deploy common + mac packages only"
    echo ""
    echo -e "${BOLD}Utility Commands:${RESET}"
    echo "  version               Show Eden version and location"
    echo "  help                  Show this help message"
    echo ""
    echo -e "${BOLD}Examples:${RESET}"
    echo "  eden install          # Bootstrap Eden (first-time setup)"
    echo "  eden update           # Update to latest Eden changes"
    echo "  eden stow --adopt     # Pull existing configs into Eden (useful after upstream updates)"
    echo "  eden graft            # Integrate branch configurations"
    echo "  eden doctor           # Check system health"
    echo "  eden packages         # Install platform packages"
    echo "  eden check-package fnm  # Check where a package is available"
    echo ""
    echo -e "${BOLD}Environment:${RESET}"
    echo "  Eden Root: $EDEN_ROOT"
    echo ""
    echo "For more information, see the README at $EDEN_ROOT/README.md"
}

# Show version
show_version() {
    print_header "Eden Environment Manager"
    echo "Location: $EDEN_ROOT"
    
    if [ -d "$EDEN_ROOT/.git" ]; then
        local commit=$(cd "$EDEN_ROOT" && git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        local branch=$(cd "$EDEN_ROOT" && git branch --show-current 2>/dev/null || echo "unknown")
        echo "Branch: $branch"
        echo "Commit: $commit"
    fi
}

# Install packages based on platform
install_packages() {
    print_header "Installing Platform Packages"
    
    case "$(uname -s)" in
        Darwin)
            print_info "macOS detected - installing from Brewfile"
            if ! command -v brew &> /dev/null; then
                print_error "Homebrew not found. Please install Homebrew first."
                exit 1
            fi
            cd "$EDEN_ROOT"
            if [ -f "Brewfile" ]; then
                brew bundle
                print_success "Packages installed from Brewfile"
            else
                print_error "Brewfile not found"
                exit 1
            fi
            ;;
        Linux)
            print_info "Linux detected - installing from pacman.txt"
            cd "$EDEN_ROOT"
            if [ -f "pacman.txt" ]; then
                # Filter out comments and empty lines
                local packages=$(grep -v '^#' pacman.txt | grep -v '^$' | tr '\n' ' ')
                
                # Check for yay (AUR helper) first
                if command -v yay &> /dev/null; then
                    print_info "Using yay (includes AUR packages)"
                    yay -S --needed $packages
                    print_success "Packages installed from pacman.txt"
                elif command -v pacman &> /dev/null; then
                    print_info "Using pacman (AUR packages will be skipped)"
                    print_info "For AUR packages, install yay first"
                    sudo pacman -S --needed $packages 2>&1 || true
                    echo ""
                    print_info "Install yay: git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si"
                else
                    print_error "Neither yay nor pacman found. Are you on Arch Linux?"
                    exit 1
                fi
            else
                print_error "pacman.txt not found"
                exit 1
            fi
            ;;
        *)
            print_error "Unsupported platform: $(uname -s)"
            exit 1
            ;;
    esac
}

# List available packages
list_packages() {
    print_header "Available Packages for Current Platform"
    
    case "$(uname -s)" in
        Darwin)
            echo "Platform: macOS (Homebrew)"
            echo "Package file: $EDEN_ROOT/Brewfile"
            echo ""
            if [ -f "$EDEN_ROOT/Brewfile" ]; then
                cat "$EDEN_ROOT/Brewfile"
            fi
            ;;
        Linux)
            echo "Platform: Arch Linux (pacman)"
            echo "Package file: $EDEN_ROOT/pacman.txt"
            echo ""
            if [ -f "$EDEN_ROOT/pacman.txt" ]; then
                cat "$EDEN_ROOT/pacman.txt"
            fi
            ;;
        *)
            print_error "Unsupported platform: $(uname -s)"
            exit 1
            ;;
    esac
}

# Check if a package exists and where
check_package() {
    local pkg="$1"
    
    if [ -z "$pkg" ]; then
        print_error "Usage: eden check-package <package-name>"
        exit 1
    fi
    
    print_header "Checking package: $pkg"
    echo ""
    
    case "$(uname -s)" in
        Darwin)
            print_info "Platform: macOS (Homebrew)"
            echo ""
            
            if ! command -v brew &> /dev/null; then
                print_error "Homebrew not installed"
                exit 1
            fi
            
            # Search brew
            echo "Searching Homebrew..."
            if brew search "$pkg" 2>/dev/null | grep -q "^$pkg\$"; then
                print_success "Found in Homebrew formulae: $pkg"
                echo ""
                brew info "$pkg" 2>/dev/null | head -5
            elif brew search --cask "$pkg" 2>/dev/null | grep -q "^$pkg\$"; then
                print_success "Found in Homebrew casks: $pkg"
                echo ""
                brew info --cask "$pkg" 2>/dev/null | head -5
            else
                echo "Searching for similar packages:"
                brew search "$pkg" 2>/dev/null | head -10
            fi
            ;;
        Linux)
            print_info "Platform: Arch Linux"
            echo ""
            
            # Check priority: Omarchy -> Official repos -> AUR
            
            # 1. Check Omarchy repo first
            if pacman -Ss "^$pkg$" 2>/dev/null | grep -q "^omarchy/"; then
                print_success "Found in Omarchy repo: $pkg"
                echo ""
                pacman -Si "$pkg" 2>/dev/null | grep -E "^(Repository|Name|Version|Description)" || true
            # 2. Check official repos
            elif pacman -Ss "^$pkg$" 2>/dev/null | grep -q "^"; then
                print_success "Found in official repos: $pkg"
                echo ""
                pacman -Si "$pkg" 2>/dev/null | grep -E "^(Repository|Name|Version|Description)" || true
            # 3. Check AUR if yay is available
            elif command -v yay &> /dev/null; then
                echo "Not in Omarchy or official repos, checking AUR..."
                if yay -Ss "^$pkg$" 2>/dev/null | grep -q "^aur/$pkg"; then
                    print_success "Found in AUR: $pkg"
                    echo ""
                    yay -Si "$pkg" 2>/dev/null | grep -E "^(Repository|Name|Version|Description)" || true
                else
                    print_error "Package not found in Omarchy, official repos, or AUR"
                    echo ""
                    echo "Searching for similar packages:"
                    echo ""
                    echo "Omarchy repo:"
                    pacman -Sl omarchy 2>/dev/null | grep "$pkg" | head -10 || echo "  (none found)"
                    echo ""
                    echo "Official repos:"
                    pacman -Ss "$pkg" 2>/dev/null | head -10 || echo "  (none found)"
                    echo ""
                    echo "AUR:"
                    yay -Ss "$pkg" 2>/dev/null | grep "^aur/" | head -10 || echo "  (none found)"
                fi
            else
                print_error "Package not found in Omarchy or official repos"
                echo ""
                echo "Install yay to check AUR: git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si"
                echo ""
                echo "Searching for similar packages:"
                echo ""
                echo "Omarchy repo:"
                pacman -Sl omarchy 2>/dev/null | grep "$pkg" | head -10 || echo "  (none found)"
                echo ""
                echo "Official repos:"
                pacman -Ss "$pkg" 2>/dev/null | head -10 || echo "  (none found)"
            fi
            ;;
        *)
            print_error "Unsupported platform: $(uname -s)"
            exit 1
            ;;
    esac
}

# Run a script from Eden root
run_script() {
    local script_name="$1"
    shift
    local script_path="$EDEN_ROOT/$script_name"
    
    if [ ! -f "$script_path" ]; then
        print_error "Script not found: $script_path"
        exit 1
    fi
    
    if [ ! -x "$script_path" ]; then
        print_error "Script not executable: $script_path"
        exit 1
    fi
    
    cd "$EDEN_ROOT"
    "$script_path" "$@"
}

# Deploy platform-specific packages
deploy_platform() {
    local platform="$1"
    print_header "Deploying Eden for $platform"
    
    cd "$EDEN_ROOT"
    
    # Stow common first
    print_info "Stowing common package..."
    stow -v -d packages -t "$HOME" common
    
    # Stow platform package
    print_info "Stowing $platform package..."
    stow -v -d packages -t "$HOME" "$platform"
    
    print_success "Deployment complete"
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        install)
            run_script "install.sh" "$@"
            ;;
        update)
            run_script "update.sh" "$@"
            ;;
        stow)
            # Check for --adopt flag
            ADOPT_FLAG=""
            if [[ "$*" == *"--adopt"* ]]; then
                ADOPT_FLAG="--adopt"
                print_header "Adopting and Stowing Eden Configs"
                echo ""
                print_info "This will move existing files into Eden and create symlinks"
                echo ""
            else
                print_header "Applying Eden Symlinks"
            fi
            
            cd "$EDEN_ROOT"
            case "$(uname -s)" in
                Darwin)
                    print_info "Stowing common + mac packages..."
                    stow -v $ADOPT_FLAG -d packages -t "$HOME" common mac
                    ;;
                Linux)
                    print_info "Stowing common + arch packages..."
                    stow -v $ADOPT_FLAG -d packages -t "$HOME" common arch
                    ;;
            esac
            
            if [[ -n "$ADOPT_FLAG" ]]; then
                print_success "Files adopted into Eden and symlinks created"
                echo ""
                print_info "Next steps:"
                echo "  1. Review changes: cd $EDEN_ROOT && git status"
                echo "  2. Check diffs: git diff"
                echo "  3. Commit if satisfied: git add -A && git commit -m 'Adopt configs from Omarchy'"
                echo "  4. Or revert: git checkout ."
            else
                print_success "Eden symlinks applied"
            fi
            ;;
        unstow|clean)
            print_header "Removing Eden Symlinks"
            cd "$EDEN_ROOT"
            case "$(uname -s)" in
                Darwin)
                    stow -D -d packages -t "$HOME" common mac 2>/dev/null || true
                    ;;
                Linux)
                    stow -D -d packages -t "$HOME" common arch 2>/dev/null || true
                    ;;
            esac
            print_success "Eden symlinks removed"
            ;;
        graft)
            run_script "graft.sh" "$@"
            ;;
        doctor)
            run_script "doctor.sh" "$@"
            ;;
        status|info)
            # Check if status.sh exists, otherwise show basic info
            if [ -f "$EDEN_ROOT/status.sh" ]; then
                run_script "status.sh" "$@"
            else
                show_version
                echo ""
                run_script "doctor.sh" "$@"
            fi
            ;;
        packages)
            install_packages
            ;;
        list-packages)
            list_packages
            ;;
        check-package)
            check_package "$@"
            ;;
        deploy-arch)
            deploy_platform "arch"
            ;;
        deploy-mac)
            deploy_platform "mac"
            ;;
        version|--version|-v)
            show_version
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            echo "Run 'eden help' for usage information."
            exit 1
            ;;
    esac
}

main "$@"

