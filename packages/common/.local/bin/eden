#!/usr/bin/env bash
# eden - Central command dispatcher for Eden environment management
# Usage: eden <command> [options]

set -euo pipefail

# Determine Eden root directory
# This script lives in packages/common/.local/bin/, so go up 4 levels
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
EDEN_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
RESET='\033[0m'

# Print colored output
print_header() {
    echo -e "${BOLD}${BLUE}$1${RESET}"
}

print_success() {
    echo -e "${GREEN}✓${RESET} $1"
}

print_error() {
    echo -e "${RED}✗${RESET} $1" >&2
}

print_info() {
    echo -e "${BLUE}→${RESET} $1"
}

# Show help
show_help() {
    cat << EOF
$(print_header "Eden - Personal Environment Manager")

${BOLD}Usage:${RESET}
  eden <command> [options]

${BOLD}Core Commands:${RESET}
  install [--packages]  Bootstrap Eden on a fresh system
                        Use --packages to install packages from Brewfile/pacman.txt
  update                Update Eden from git and re-apply symlinks
  stow [--adopt]        Apply Eden symlinks (common + platform packages)
                        Use --adopt to pull existing files into Eden
  unstow                Remove Eden symlinks (same as clean)
  graft                 Discover and integrate branch configs
  doctor                Validate Eden installation health
  status                Show Eden system overview and health

${BOLD}Package Management:${RESET}
  packages              Install packages from Brewfile (macOS) or pacman.txt (Arch)
  list-packages         Show available packages for current platform

${BOLD}Platform Commands:${RESET}
  deploy-arch           Deploy common + arch packages only
  deploy-mac            Deploy common + mac packages only

${BOLD}Utility Commands:${RESET}
  version               Show Eden version and location
  help                  Show this help message

${BOLD}Examples:${RESET}
  eden install          # Bootstrap Eden (first-time setup)
  eden update           # Update to latest Eden changes
  eden stow --adopt     # Pull existing configs into Eden (useful after upstream updates)
  eden graft            # Integrate branch configurations
  eden doctor           # Check system health
  eden packages         # Install platform packages

${BOLD}Environment:${RESET}
  Eden Root: $EDEN_ROOT

For more information, see the README at $EDEN_ROOT/README.md
EOF
}

# Show version
show_version() {
    print_header "Eden Environment Manager"
    echo "Location: $EDEN_ROOT"
    
    if [ -d "$EDEN_ROOT/.git" ]; then
        local commit=$(cd "$EDEN_ROOT" && git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        local branch=$(cd "$EDEN_ROOT" && git branch --show-current 2>/dev/null || echo "unknown")
        echo "Branch: $branch"
        echo "Commit: $commit"
    fi
}

# Install packages based on platform
install_packages() {
    print_header "Installing Platform Packages"
    
    case "$(uname -s)" in
        Darwin)
            print_info "macOS detected - installing from Brewfile"
            if ! command -v brew &> /dev/null; then
                print_error "Homebrew not found. Please install Homebrew first."
                exit 1
            fi
            cd "$EDEN_ROOT"
            if [ -f "Brewfile" ]; then
                brew bundle
                print_success "Packages installed from Brewfile"
            else
                print_error "Brewfile not found"
                exit 1
            fi
            ;;
        Linux)
            print_info "Linux detected - installing from pacman.txt"
            if ! command -v pacman &> /dev/null; then
                print_error "pacman not found. This script supports Arch Linux."
                exit 1
            fi
            cd "$EDEN_ROOT"
            if [ -f "pacman.txt" ]; then
                # Filter out comments and empty lines
                local packages=$(grep -v '^#' pacman.txt | grep -v '^$' | tr '\n' ' ')
                print_info "Installing packages: $packages"
                sudo pacman -S --needed $packages
                print_success "Packages installed from pacman.txt"
            else
                print_error "pacman.txt not found"
                exit 1
            fi
            ;;
        *)
            print_error "Unsupported platform: $(uname -s)"
            exit 1
            ;;
    esac
}

# List available packages
list_packages() {
    print_header "Available Packages for Current Platform"
    
    case "$(uname -s)" in
        Darwin)
            echo "Platform: macOS (Homebrew)"
            echo "Package file: $EDEN_ROOT/Brewfile"
            echo ""
            if [ -f "$EDEN_ROOT/Brewfile" ]; then
                cat "$EDEN_ROOT/Brewfile"
            fi
            ;;
        Linux)
            echo "Platform: Arch Linux (pacman)"
            echo "Package file: $EDEN_ROOT/pacman.txt"
            echo ""
            if [ -f "$EDEN_ROOT/pacman.txt" ]; then
                cat "$EDEN_ROOT/pacman.txt"
            fi
            ;;
        *)
            print_error "Unsupported platform: $(uname -s)"
            exit 1
            ;;
    esac
}

# Run a script from Eden root
run_script() {
    local script_name="$1"
    shift
    local script_path="$EDEN_ROOT/$script_name"
    
    if [ ! -f "$script_path" ]; then
        print_error "Script not found: $script_path"
        exit 1
    fi
    
    if [ ! -x "$script_path" ]; then
        print_error "Script not executable: $script_path"
        exit 1
    fi
    
    cd "$EDEN_ROOT"
    "$script_path" "$@"
}

# Deploy platform-specific packages
deploy_platform() {
    local platform="$1"
    print_header "Deploying Eden for $platform"
    
    cd "$EDEN_ROOT"
    
    # Stow common first
    print_info "Stowing common package..."
    stow -v -d packages -t "$HOME" common
    
    # Stow platform package
    print_info "Stowing $platform package..."
    stow -v -d packages -t "$HOME" "$platform"
    
    print_success "Deployment complete"
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        install)
            run_script "install.sh" "$@"
            ;;
        update)
            run_script "update.sh" "$@"
            ;;
        stow)
            # Check for --adopt flag
            ADOPT_FLAG=""
            if [[ "$*" == *"--adopt"* ]]; then
                ADOPT_FLAG="--adopt"
                print_header "Adopting and Stowing Eden Configs"
                echo ""
                print_info "This will move existing files into Eden and create symlinks"
                echo ""
            else
                print_header "Applying Eden Symlinks"
            fi
            
            cd "$EDEN_ROOT"
            case "$(uname -s)" in
                Darwin)
                    print_info "Stowing common + mac packages..."
                    stow -v $ADOPT_FLAG -d packages -t "$HOME" common mac
                    ;;
                Linux)
                    print_info "Stowing common + arch packages..."
                    stow -v $ADOPT_FLAG -d packages -t "$HOME" common arch
                    ;;
            esac
            
            if [[ -n "$ADOPT_FLAG" ]]; then
                print_success "Files adopted into Eden and symlinks created"
                echo ""
                print_info "Next steps:"
                echo "  1. Review changes: cd $EDEN_ROOT && git status"
                echo "  2. Check diffs: git diff"
                echo "  3. Commit if satisfied: git add -A && git commit -m 'Adopt configs from Omarchy'"
                echo "  4. Or revert: git checkout ."
            else
                print_success "Eden symlinks applied"
            fi
            ;;
        unstow|clean)
            print_header "Removing Eden Symlinks"
            cd "$EDEN_ROOT"
            case "$(uname -s)" in
                Darwin)
                    stow -D -d packages -t "$HOME" common mac 2>/dev/null || true
                    ;;
                Linux)
                    stow -D -d packages -t "$HOME" common arch 2>/dev/null || true
                    ;;
            esac
            print_success "Eden symlinks removed"
            ;;
        graft)
            run_script "graft.sh" "$@"
            ;;
        doctor)
            run_script "doctor.sh" "$@"
            ;;
        status|info)
            # Check if status.sh exists, otherwise show basic info
            if [ -f "$EDEN_ROOT/status.sh" ]; then
                run_script "status.sh" "$@"
            else
                show_version
                echo ""
                run_script "doctor.sh" "$@"
            fi
            ;;
        packages)
            install_packages
            ;;
        list-packages)
            list_packages
            ;;
        deploy-arch)
            deploy_platform "arch"
            ;;
        deploy-mac)
            deploy_platform "mac"
            ;;
        version|--version|-v)
            show_version
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            echo "Run 'eden help' for usage information."
            exit 1
            ;;
    esac
}

main "$@"

